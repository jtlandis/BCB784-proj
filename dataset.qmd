---
title: GTEX PTBP1
author: justin landis
---

```{r setup}
# general function to load packages and install if not available.
require_packages <- function(packages, repo = c("CRAN", "Bioconductor")) {
  repo <- match.arg(repo, c("CRAN", "Bioconductor"))
  for (package in packages) {
    if (!requireNamespace(package, quietly = TRUE)) {
      res <- readline(paste0("Package ", package, " not found. Install? [y/n]"))
      if (grepl("^y", res, ignore.case = TRUE)) {
        switch(repo,
               "Bioconductor" = {
                 if (!requireNamespace("BiocManager", quietly = TRUE)) {
                   install.packages("BiocManager")
                 }
                 BiocManager::install(package)
               },
               "CRAN" = {
                 install.packages(package)
               })
      } else {
        warning(paste0("Package ", package, " not installed."))
      }
    }
  }
}

require_packages(
  packages = c("dplyr", "readr", "purrr", "readxl", "stringr"),
  repo = "CRAN")
require_packages(
  packages = c("SummarizedExperiment", "plyxp",
    "plyranges", "rtracklayer"),
  repo = "Bioconductor")

```

```{r data_download}
#download data

download_file <- function(url, destfile) {
  if (!file.exists("data")) {
    dir.create("data")
  }
  if (!file.exists(sprintf("data/%s", destfile))) {
    destfile <- sprintf("data/%s", destfile)
    download.file(url, destfile = destfile)
  }
}


download_file("https://storage.googleapis.com/adult-gtex/long-read-data/v9/long-read-RNA-seq/quantification_flair_filter.counts.txt.gz",
              destfile = "quantification_flair_filter.counts.txt.gz")
download_file("https://storage.googleapis.com/adult-gtex/long-read-data/v9/long-read-RNA-seq/flair_filter_transcripts.gtf.gz",
              destfile = "flair_filter_transcripts.gtf.gz")
download_file("https://static-content.springer.com/esm/art%3A10.1038%2Fs41586-022-05035-y/MediaObjects/41586_2022_5035_MOESM4_ESM.xlsx",
  destfile = "metadata.xlsx")

```


```{r}

library(SummarizedExperiment)
library(dplyr)
library(plyranges)
library(plyxp)

flair_gtf <- rtracklayer::import("data/flair_filter_transcripts.gtf.gz")

.gtex <- readr::read_table(
  "data/quantification_flair_filter.counts.txt.gz",
  col_names = TRUE, show_col_types = FALSE)
head(.gtex)
.gtex$transcript[1]
dim(.gtex)
```


organizing the gtf ranges provided by the paper. I believe we will start with
the transcript level first. traditionally, gtf states a gene, transcript, and
then the exons, before moving to a new level. Genes seem to be omitted.

We will just verify quickly

```{r}
.rle <- flair_gtf$type |>
  as.character() |>
  rle()

trans <- local({
  # keep all transcripts
  transcripts <- filter(flair_gtf, type == "transcript")
  .exons <- filter(flair_gtf, type == "exon")
  # make grouping numbers
  .exons$transcript_group <- .rle$lengths[.rle$values=="exon"] |> {
    \(x) rep(seq_along(x), x)
    }()
  # split gene identifier in this subset
  exons <- split(.exons$gene_id, .exons$transcript_group)
  # quickly check that the order is the same
  all(transcripts$gene_id == purrr::map_chr(exons, ~unique(.x)))
  # make a compressed glist and send back to transcripts list
  transcripts$exons <- split(.exons, .exons$transcript_group)
  transcripts
})

```

There are some hash patterns in the transcript_id mcols field.

```{r}

is_hash <- function(x) {
  grepl(
      "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}",
      x)
}

.t <- trans |>
  mutate(
    has_hash = is_hash(transcript_id),
    ensbl_only = grepl("^ENS", transcript_id)
  )

# they are disjoint sets
any(.t$has_hash & .t$ensbl_only)
sum(.t$has_hash, .t$ensbl_only)
```

Based on the above results we can see that those identified with an ENSBL are
likely previously known, whereas those with a hash are new ids.

The gtex counts also has a naming convention. we will investigate by spliting
the identifier into three fields.

```{r}
gtex <- mutate(.gtex,
       key = stringr::str_extract(transcript, "^[^_]+"),
       .before = transcript)
trans <- trans|>
  mutate(
    key = stringr::str_extract(transcript_id, "^[^_]+")
  )

dup_key <- anyDuplicated(gtex$key) # there is one key that is duplicated??
dup_key <- gtex$key[dup_key]

# just check to see how many are duplicated in each tabble
filter(gtex, key %in% dup_key)$transcript
filter(trans, key %in% dup_key)$transcript_id
ind <- which(trans$key %in% dup_key) # get the index
ord <- match(gtex$key, trans$key)
ind1 <- which(ord == ind[1]) #first index
trans_ <- trans[ord]
trans_[ind1[2]] <- trans[ind[2]]

col_data <- readxl::read_xlsx("data/metadata.xlsx",
                              sheet = "Suppl.Table1",
                              range = "A1:T97")

col_slice <- match(colnames(select(gtex, -key, -transcript)),
                   col_data$sample_id)

se <- SummarizedExperiment(
  assays = list(
    counts = gtex |> select(-key) |> {
      \(x) {
        rnms <- x$transcript
        x <- select(x, -transcript)
        x <- as.matrix(x)
        rownames(x) <- rnms
        x
      }
    }()
  ),
  rowRanges = trans_,
  colData = as(col_data[col_slice,], "DFrame")
) |>
  #wrapper class for SummarizedExperiment
  PlySummarizedExperiment() |>
  group_by(cols(sample_name)) |>
  mutate(
    cols(RBP_kd = case_when(
      !grepl("Cells - Cultured fibroblasts", tissue) ~ NA, #only fibroblasts
      grepl("exp", sample_id) ~ TRUE, # exp for experimental purtebation
      any(grepl("exp", sample_id)) ~ FALSE, # all other items in group are false
      TRUE ~ NA # everything else should be NA
    ))
  ) |>
  ungroup()
# se

RBP_kd <- filter(se, cols( !is.na(RBP_kd) ))
# the above is a subset of the below.
fibroblasts <- filter(se, cols(tissue == "Cells - Cultured fibroblasts"))
filter(fibroblasts, cols(is.na(RBP_kd))) |> pull(cols(sample_name)) |> table()
k562 <- filter(se, cols(sample_name == "K562"))
donor <- filter(se,
  cols(
    !tissue %in% c("Cells - Cultured fibroblasts", "K562")
  )
)
donor |> pull(cols(tissue)) |> table()

```


```{r}
se <- plyxp(se,
      \(se) {
        rr <- rowRanges(se)
        rr$.start <- start(rr)
        rr$.seqnames <- seqnames(rr)
        rowRanges(se) <- rr
        se
      })
se2 <- mutate(
  se,
  rows(
    new_transcript = is_hash(transcript_id)
  )) |>
  group_by(rows(.start, .seqnames = as.character(.seqnames))) |>
  summarise(rows(
    n = n(),
    n_new = sum(new_transcript),
    n_old = n - n_new
  ),
  counts = list(counts))

se2 <- ungroup(se2) |>
  mutate(
    rows(
      type = case_when(
        n_new == 0 ~ "old",
        n_old == 0 ~ "new",
        TRUE ~ "mix"
      )
    )
  )

pull(se2, rows(type)) |> table()
```


