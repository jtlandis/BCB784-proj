---
title: GTEX PTBP1
author: justin landis
---

```{r setup}
# general function to load packages and install if not available.




```

```{r data_download}
#download data

download_file <- function(url, destfile) {
  if (!file.exists("data")) {
    dir.create("data")
  }
  if (!file.exists(sprintf("data/%s", destfile))) {
    destfile <- sprintf("data/%s", destfile)
    download.file(url, destfile = destfile)
  }
}


download_file("https://storage.googleapis.com/adult-gtex/long-read-data/v9/long-read-RNA-seq/quantification_flair_filter.counts.txt.gz",
              destfile = "quantification_flair_filter.counts.txt.gz")
download_file("https://storage.googleapis.com/adult-gtex/long-read-data/v9/long-read-RNA-seq/flair_filter_transcripts.gtf.gz",
              destfile = "flair_filter_transcripts.gtf.gz")
download_file("https://static-content.springer.com/esm/art%3A10.1038%2Fs41586-022-05035-y/MediaObjects/41586_2022_5035_MOESM4_ESM.xlsx",
  destfile = "metadata.xlsx")

```


```{r}

library(SummarizedExperiment)
library(dplyr)
library(plyranges)
library(plyxp)

flair_gtf <- rtracklayer::import("data/flair_filter_transcripts.gtf.gz")

.gtex <- readr::read_table(
  "data/quantification_flair_filter.counts.txt.gz",
  col_names = TRUE, show_col_types = FALSE)
head(.gtex)
.gtex$transcript[1]
dim(.gtex)
```


organizing the gtf ranges provided by the paper. I believe we will start with
the transcript level first. traditionally, gtf states a gene, transcript, and
then the exons, before moving to a new level. Genes seem to be omitted.

We will just verify quickly

```{r}

```

There are some hash patterns in the transcript_id mcols field.

```{r}

is_hash <- function(x) {
  grepl(
      "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}",
      x)
}

.t <- trans |>
  mutate(
    has_hash = is_hash(transcript_id),
    ensbl_only = grepl("^ENS", transcript_id)
  )

# they are disjoint sets
any(.t$has_hash & .t$ensbl_only)
sum(.t$has_hash, .t$ensbl_only)
```

Based on the above results we can see that those identified with an ENSBL are
likely previously known, whereas those with a hash are new ids.

The gtex counts also has a naming convention. we will investigate by spliting
the identifier into three fields.




```{r quantify_tss}
se <- plyxp(se,
      \(se) {
        rr <- rowRanges(se)
        rr$.start <- start(rr)
        rr$.seqnames <- seqnames(rr)
        rowRanges(se) <- rr
        se
      })
se2 <- mutate(
  se,
  rows(
    new_transcript = is_hash(transcript_id),
    has_ensbl_parent = grepl("^ENSG", gene_id)
  )) |>
  group_by(rows(.start, .seqnames = as.character(.seqnames))) 
rr <-  se2 |> {
    function(se) {
      row_groups <- group_data(se)$row_groups
      groups <- vctrs::list_unchop(
        as.list(row_groups$.indices_group_id),
        indices = row_groups$.indices)
      rr <- rowRanges(se(se))
      mcols(rr) <- NULL
      mcols(rr)$.exons <- rowData(se)$exons
      split(rr, groups)
    }
  }()
se2 <- se2 |> summarise(rows(
    n = n(),
    n_novel = sum(!has_ensbl_parent & new_transcript),
    n_novel_ensbl = sum(has_ensbl_parent & new_transcript),
    n_not_novel = sum(!new_transcript),
    across(c(gene_id, transcript_id), list)
  ),
  counts = list(counts))
rowData(se2)$.ranges <- rr
se2 <- ungroup(se2) |>
  mutate(
    rows(
      # similar to file permissions,
      # 1 -> novel: contains transcript with no associated gene parent and has hash
      # 2 -> ensbl novel: contains transcript with associated gene parent and has hash
      # 4 -> not novel: contains transcript that has no hash (assumed to have a genee parent)
      encode_type = (n_novel>0) + (2 * (n_novel_ensbl>0)) + (4 * (n_not_novel>0))
    )
  )


# saveRDS(se(se2), box::file("data/longRead.rds"))

pull(se2, rows(encode_type)) |> table()
```

```{r}
# rr <- rowRanges(se(se))
se_small <- readRDS(box::file("data/bulk_RNAseq_shortread-subset_v8.1.rds"))
# rr_small <- rowRanges(se_small)
# rr_split <- split(rr, rr$gene_id)
# rr_sml_split <- split(rr_small, rr_small$gene_id)
# same_names <- names(rr_sml_split)[names(rr_sml_split) %in% names(rr_split)]
# 
# rr_split <- rr_split[same_names]
# rr_sml_split <- rr_sml_split[same_names]
# .common_trans <- intersect(rr$transcript_id, rr_small$transcript_id)
# long_rr_trans <- slice(rr, match(.common_trans, transcript_id))
# short_rr_trans <- slice(rr_small, match(.common_trans, transcript_id)) 
```

```{r}
se_short <- filter(new_plyxp(se_small), rows(transcript_type == "protein_coding"))
.common_trans <- intersect(
  rowData(se)$transcript_id,
  rowData(se_short)$transcript_id
)
se_long <- se[match(.common_trans, rowData(se)$transcript_id),] |>
  mutate(cols(seq_source = "long_read"))
se_short <- se_small[match(.common_trans, rowData(se_small)$transcript_id),] |>
  new_plyxp() |>
  mutate(cols(seq_source = "short_read"),
         counts = as.integer(round(rsem)))
# assume x, y have same row info
merge_cols <- function(x, y, ...) {
  # browser()
  quos <- plyxp:::plyxp_quos(..., .named = F, .ctx_default = "assays",
                             .ctx_opt = "cols")
  quos <- split(lapply(quos, rlang::quo_get_expr),
                vapply(quos, attr, "plyxp:::ctx", FUN.VALUE = ""))
  
  x <- select(x, !!!quos[["assays"]], rows(everything()),
              cols(!!!quos[["cols"]]))
  y <- select(y, !!!quos[["assays"]], cols(!!!quos[["cols"]])) |>
    plyxp(\(y, x) {
      rowRanges(y) <- rowRanges(x)
      y
    }, x = se(x))
  
  se <- cbind(
    se(x), se(y)
  )
  new_plyxp(se)
}
# we discussed keeping the "richer" annotations
merged_se <- merge_cols(se_short, se_long, counts,
                        cols(sample_name, tissue, seq_source))

```


```{r fig1c-attempt}

library(ggplot2)

# these should be aligned in terms of the transcripts!
plot_data <- list(short = se_short,
     long = se_long) |>
  lapply(
    mutate,
    rows(trans_width = lapply(width(exons), sum, 1) |>
           purrr::map_dbl(identity),
         #kilobases
         trans_kb = trans_width/1000),
    RPK = counts/.rows$trans_kb,
    cols(
      scaleFactor = colSums(.assays_asis$RPK)/1e6
    ),
    TPM = RPK/.cols$scaleFactor
  ) |>
  lapply(
    select,
    TPM,
    cols(sample_name, tissue, seq_source)
  ) |> {
    \(plot_data) {
      short <- colData(plot_data$short) |>
        with(interaction(sample_name, tissue, drop = TRUE))
      long <- colData(plot_data$long) |>
        with(interaction(sample_name, tissue, drop = TRUE))
      common <- intersect(short, long)
      rownames(se(plot_data[[2]])) <- rownames(se(plot_data[[1]]))
      purrr::map2(
        plot_data,
        list(short, long),
        ~ .x[,match(common, .y)])
    }
  }() |>
  lapply(as_tibble) |>
  dplyr::bind_rows() |>
  tidyr::pivot_wider(
    id_cols = c(.features, sample_name, tissue),
    names_from = seq_source,
    values_from = TPM
  ) |>
  filter(if_all(ends_with("read"),
                ~ .x > 1)) |>
  mutate(across(ends_with("read"),
                ~ log10(.x), 
                .names = "{.col}_log10"))
cor(plot_data$short_read_log10, plot_data$long_read_log10)
.plot_trans <- ggplot(plot_data, aes(short_read_log10, long_read_log10)) +
  geom_hex(binwidth = .125) +
  scale_fill_gradient(low = "white", high = "black") +
  geom_abline(color = "limegreen", slope = 1, intercept = 0) +
  theme_classic(base_size = 22) +
  labs(y = "log10 ONT TPM", x = "log10 Illumina TPM",
       title = "transcripts") +
  guides(fill = guide_colorbar(
    position = "bottom", theme = theme(
      legend.title = element_text(vjust = .7),
      legend.text = element_text(size = 12, angle = 45, vjust = 1)))) +
  coord_equal(xlim = c(0, 5), ylim = c(0, 5))
  # theme(legend.position = "bottom", legend.text = element_text(angle = 90)) 
.plot_trans
ggsave(box::file("data", "fig1c-trans.png"), plot = .plot_trans,
       device = "png", height = 7, width = 5)
```

```{r fig1c-attempt2}

# downstream issue where the longread data has ENSG00000002586.18 (and a few 
# other genes) annotated on both X and Y chromosomes but in short read data
# it is only annotated on the X?
# 
se_short <- filter(new_plyxp(se_small),
                   rows(transcript_type == "protein_coding")) |>
  plyxp_on(
    mutate, .on = rowRanges,
    combo = paste(gene_id, seqnames, strand)
  )
se_long <- plyxp_on(
  se, mutate, .on = rowRanges,
  combo = paste(gene_id, seqnames, strand)
)

.common_genes <- intersect(
  rowData(se_long)$combo,
  rowData(se_short)$combo
)

se_long <- filter(se_long, rows(combo %in% .common_genes)) |>
  mutate(cols(seq_source = "long_read"))
se_short <- se_short |>
  filter(rows(combo %in% .common_genes)) |>
  mutate(cols(seq_source = "short_read"),
         counts = as.integer(round(rsem)))

# these should be aligned in terms of the transcripts!
plot_data <- list(short = se_short,
     long = se_long) |> 
  lapply(
    arrange,
    rows(gene_id)
  ) |>
  lapply(
    mutate,
    rows(
      .start = lapply(start(exons), min) |> purrr::map_int(identity),
      .end = lapply(end(exons), max) |> purrr::map_int(identity),
      .seqnames = { seqs <- exons@unlistData@seqnames |>
        as.character()
      purrr::map2(start(exons@partitioning),
                  end(exons@partitioning),
                  function(i,j,x) x[c(i,j)], x = seqs) |>
        purrr::map_chr(unique)
      },
      .strand = {
        strnd <- exons@unlistData@strand |> as.character()
        purrr::map2(
          start(exons@partitioning),
          end(exons@partitioning),
          function(i,j,x) x[c(i,j)], x = strnd) |>
          purrr::map_chr(unique)
        }
    )
  ) |>
  lapply(
    group_by,
    rows(gene_id)
  ) |>
  lapply(
    summarise,
    counts = colSums(counts),
    rows(
      across(matches("\\.[se]"), list),
      .features = unique(gene_id)
    )
  ) |>
  lapply(ungroup) |>
  lapply(
    mutate,
    rows(
      .start = purrr::map_int(.start, min),
      .end = purrr::map_int(.end, max),
      across(c(.seqnames, .strand), ~purrr::map_chr(.x, unique)),
      gene_range = GRanges(.seqnames, IRanges(start = .start, end = .end),
                          strand = .strand),
      across(matches("\\.[se]"), ~ NULL)
    )
  ) |>
  lapply(
    mutate,
    rows(
      #kilobases
      trans_kb = width(gene_range)/1000),
    RPK = counts/.rows$trans_kb,
    cols(
      scaleFactor = colSums(.assays_asis$RPK)/1e6
    ),
    TPM = RPK/.cols$scaleFactor
  ) |> {
    \(x) {
      .common <- lapply(x, rowData) |>
        lapply(`[[`, "gene_id")
      .common <- intersect(.common[[1]], .common[[2]])
      lapply(
        x,
        function(x, g) x[match(g, rownames(se(x))),],
        g = .common
      )
    } 
  }() |>
  lapply(
    select,
    TPM,
    cols(sample_name, tissue, seq_source)
  ) |> {
    \(plot_data) {
      short <- colData(plot_data$short) |>
        with(interaction(sample_name, tissue, drop = TRUE))
      long <- colData(plot_data$long) |>
        with(interaction(sample_name, tissue, drop = TRUE))
      common <- intersect(short, long)
      rownames(se(plot_data[[2]])) <- rownames(se(plot_data[[1]]))
      purrr::map2(
        plot_data,
        list(short, long),
        ~ .x[,match(common, .y)])
    }
  }() |>
  lapply(as_tibble) |>
  dplyr::bind_rows() |>
  tidyr::pivot_wider(
    id_cols = c(.features, sample_name, tissue),
    names_from = seq_source,
    values_from = TPM
  ) |>
  filter(if_all(ends_with("read"),
                ~ .x > 1)) |>
  mutate(across(ends_with("read"),
                ~ log10(.x), 
                .names = "{.col}_log10"))
cor(plot_data$short_read_log10, plot_data$long_read_log10)
.plot_genes <- ggplot(plot_data, aes(short_read_log10, long_read_log10)) +
  geom_hex(binwidth = .125) +
  scale_fill_gradient(low = "white", high = "black") +
  geom_abline(color = "limegreen", slope = 1, intercept = 0) +
  theme_classic(base_size = 22) +
  labs(y = "log10 ONT TPM", x = "log10 Illumina TPM",
       title = "genes") +
  guides(fill = guide_colorbar(
    legend.title = element_text(vjust = .7),
    position = "bottom", theme = theme(
      legend.title = element_text(vjust = .7),
      legend.text = element_text(size = 12, angle = 45, vjust = 1)))) +
  coord_equal(xlim = c(0,5), ylim = c(0,5))

ggsave(box::file("data", "fig1c-genes.png"), plot = .plot_genes, device = "png",
       width = 5, height = 7)

```
